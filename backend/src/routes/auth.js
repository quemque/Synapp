import express from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/User.js";

const router = express.Router();

const getJwtSecret = () => {
  const secret = process.env.JWT_SECRET;

  if (!secret) {
    throw new Error(
      "JWT_SECRET is not defined. " +
        "Please set it in Railway environment variables or local .env file"
    );
  }

  return secret;
};

// –õ–æ–≥–∏–Ω –ø–æ email –ò–õ–ò username - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
router.post("/login", async (req, res) => {
  try {
    const { loginIdentifier, password } = req.body;

    console.log("‚úÖ Login request received:", {
      loginIdentifier,
      hasPassword: !!password,
      timestamp: new Date().toISOString(),
    });

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!loginIdentifier || !password) {
      const missingFields = [];
      if (!loginIdentifier) missingFields.push("email/username");
      if (!password) missingFields.push("password");

      return res.status(400).json({
        success: false,
        message: `Missing required fields: ${missingFields.join(", ")}`,
        errorType: "VALIDATION_ERROR",
      });
    }

    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        message: "Password must be at least 6 characters long",
        errorType: "VALIDATION_ERROR",
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ username
    const user = await User.findOne({
      $or: [
        { email: loginIdentifier.toLowerCase().trim() },
        { username: loginIdentifier.trim() },
      ],
    });

    console.log(
      "üîç User search result:",
      user ? `Found: ${user.email}` : "Not found"
    );

    if (!user) {
      return res.status(401).json({
        // 401 Unauthorized
        success: false,
        message: "Invalid email/username or password",
        errorType: "AUTH_ERROR",
        suggestion: "Please check your credentials or register a new account",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password);
    console.log("üîê Password validation:", isPasswordValid);

    if (!isPasswordValid) {
      return res.status(401).json({
        // 401 Unauthorized
        success: false,
        message: "Invalid email/username or password",
        errorType: "AUTH_ERROR",
        suggestion: "Please check your password",
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      {
        userId: user._id,
        email: user.email,
      },
      getJwtSecret(),
      {
        expiresIn: process.env.JWT_EXPIRE || "7d",
      }
    );

    console.log("‚úÖ Login successful for user:", user.email);

    res.json({
      success: true,
      message: "Login successful",
      token,
      user: {
        id: user._id,
        username: user.username,
        email: user.email,
        createdAt: user.createdAt,
      },
      expiresIn: process.env.JWT_EXPIRE || "7d",
    });
  } catch (error) {
    console.error("‚ùå Login error:", error);

    // –†–∞–∑–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    if (error.message.includes("JWT_SECRET")) {
      return res.status(500).json({
        success: false,
        message: "Server configuration error",
        errorType: "SERVER_ERROR",
        suggestion: "Please contact support",
      });
    }

    res.status(500).json({
      success: false,
      message: "Internal server error",
      errorType: "SERVER_ERROR",
      suggestion: "Please try again later",
    });
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
router.post("/register", async (req, res) => {
  try {
    const { username, email, password } = req.body;

    console.log("‚úÖ Register request received:", {
      username,
      email,
      hasPassword: !!password,
      timestamp: new Date().toISOString(),
    });

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const missingFields = [];
    if (!username) missingFields.push("username");
    if (!email) missingFields.push("email");
    if (!password) missingFields.push("password");

    if (missingFields.length > 0) {
      return res.status(400).json({
        success: false,
        message: `Missing required fields: ${missingFields.join(", ")}`,
        errorType: "VALIDATION_ERROR",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        success: false,
        message: "Please provide a valid email address",
        errorType: "VALIDATION_ERROR",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        message: "Password must be at least 6 characters long",
        errorType: "VALIDATION_ERROR",
      });
    }

    if (username.length < 3) {
      return res.status(400).json({
        success: false,
        message: "Username must be at least 3 characters long",
        errorType: "VALIDATION_ERROR",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await User.findOne({
      $or: [{ email: email.toLowerCase() }, { username }],
    });

    if (existingUser) {
      const field =
        existingUser.email === email.toLowerCase() ? "email" : "username";
      return res.status(409).json({
        // 409 Conflict
        success: false,
        message: `User with this ${field} already exists`,
        errorType: "DUPLICATE_ERROR",
        field: field,
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hashedPassword = await bcrypt.hash(password, 12);

    const user = new User({
      username: username.trim(),
      email: email.toLowerCase().trim(),
      password: hashedPassword,
    });

    await user.save();

    const token = jwt.sign(
      {
        userId: user._id,
        email: user.email,
      },
      getJwtSecret(),
      {
        expiresIn: process.env.JWT_EXPIRE || "7d",
      }
    );

    console.log("‚úÖ Registration successful for user:", user.email);

    res.status(201).json({
      success: true,
      message: "Registration successful",
      token,
      user: {
        id: user._id,
        username: user.username,
        email: user.email,
        createdAt: user.createdAt,
      },
      expiresIn: process.env.JWT_EXPIRE || "7d",
    });
  } catch (error) {
    console.error("‚ùå Registration error:", error);

    if (error.name === "ValidationError") {
      return res.status(400).json({
        success: false,
        message:
          "Validation error: " +
          Object.values(error.errors)
            .map((e) => e.message)
            .join(", "),
        errorType: "VALIDATION_ERROR",
      });
    }

    res.status(500).json({
      success: false,
      message: "Internal server error during registration",
      errorType: "SERVER_ERROR",
      suggestion: "Please try again later",
    });
  }
});

// endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
router.get("/verify", async (req, res) => {
  try {
    const token = req.headers.authorization?.replace("Bearer ", "");

    if (!token) {
      return res.status(401).json({
        success: false,
        message: "No token provided",
      });
    }

    const decoded = jwt.verify(token, getJwtSecret());
    const user = await User.findById(decoded.userId).select("-password");

    if (!user) {
      return res.status(401).json({
        success: false,
        message: "User not found",
      });
    }

    res.json({
      success: true,
      user: {
        id: user._id,
        username: user.username,
        email: user.email,
      },
    });
  } catch (error) {
    res.status(401).json({
      success: false,
      message: "Invalid or expired token",
    });
  }
});

export default router;
